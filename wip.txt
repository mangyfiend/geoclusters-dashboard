https://www.codementor.io/@dariogarciamoya/understanding-this-in-javascript-with-arrow-functions-gcpjwfyuc

https://stackoverflow.com/jobs/apply/521893?reset=False&ra=2P1EJwdKlCXa&oqs=a%3D2P1EJwdKlCXa%26so_medium%3DInternal%26so_source%3DSimilarJobsBottom

https://stackoverflow.com/questions/2350495/how-do-i-perform-the-sql-join-equivalent-in-mongodb/33511166#33511166	

https://www.joshwcomeau.com/animation/css-transitions/#action-driven-motion

https://docs.mongodb.com/drivers/node/usage-examples/updateOne/

https://stackoverflow.com/questions/41509731/how-to-add-new-values-into-existing-data-in-mongodb

https://gist.github.com/joepie91/c0069ab0e0da40cc7b54b8c2203befe1

https://stackoverflow.com/questions/4148499/how-to-style-a-checkbox-using-css

https://stackoverflow.com/questions/48699820/how-do-i-hide-api-key-in-create-react-app
https://www.sitepoint.com/es6-default-parameters/


https://github.com/mapbox/geojsonhint
https://www.npmjs.com/package/geojson-validation
https://geojson.io/#map=14/10.1299/12.5018


https://studio.mapbox.com/tilesets/
https://docs.mapbox.com/help/getting-started/map-design/
https://www.tophap.com/map/N4IgtiBcoMZQ2gWgIwCZUDoDMAGLBWATn3WUIHZd8AaLcjADjoYfIcNYBYdKBdakAC8oyThnw5JU6VNQCADlBwCARktUB7BEjSYsyBqhKpkk5MnwA2WvSY8sWBp1Q5TD-jvQZULQo9QOfiScNoycEpxolsjkroScvLwAvgJgAC5QIDAaADYaAE4gAgDWmagABACCACZgAJb5AIY55QAi+eUAxOUAQqjkyNTlAKJgAKb5AJ4AbnU5OWNDAMKV5fGWOAxFIADOitDgGtVjma1jaY1z23XVmZyOhDicluTbAGb5GmAAMnU7GZA3s0dmMUiAFlAgTkQUkgA


https://stackoverflow.com/questions/2239405/hateoas-absolute-or-relative-urls
https://stackoverflow.com/questions/30981727/link-to-another-resource-in-a-rest-api-by-its-id-or-by-its-url
https://stackoverflow.com/questions/11742067/is-there-a-way-to-add-try-catch-to-every-function-in-javascript


https://stackoverflow.com/questions/43015854/large-dataset-of-markers-or-dots-in-leaflet
https://matall.in/posts/deep-insights-visualizing-1m-flight-routes/
https://blog.mapbox.com/visualizing-3-billion-tweets-f6fc2aea03b0
https://blog.mapbox.com/clustering-millions-of-points-on-a-map-with-supercluster-272046ec5c97
https://gis.stackexchange.com/questions/206684/visualizing-large-datasets-of-polygons-with-leaflet

https://gis.stackexchange.com/questions/34589/visualizing-large-datasets-with-leaflet/36836#36836
https://github.com/vue-leaflet/Vue2Leaflet/issues/473


https://github.com/manubb/Leaflet.PixiOverlay


https://github.com/adammertel/Leaflet.MarkerCluster.PlacementStrategies
https://github.com/ghybs/Leaflet.MarkerCluster.LayerSupport
https://github.com/Leaflet/Leaflet.markercluster#other-options


// Auto full screen
// logout user
// upload legacy agcs
// manage users
// clusters rendered on base map
// agc filter functionality
// AGC insights summary
// Fully functional app settings


AVG Dashboard
We created this transparency audit, and user-feedback tool that renders all the sub-plots for each parcelized AGC on an interactive map. It ensures the farmers and other vested parties have clear visual representation showing exactly where the plots are situated, without needing to export the coordinate data to an external map visualization tool like Google Earth or Ersi AgcGIS.
Also, the preview map gives all parties involved comfort that parcelization was done fairly and accurately. It has visual guides to help a user authenticate the size of each plot.

Deliverables

1.) Render legacy AGCs
2.) Render live AGC data from a registration portal

Technical Implementation
1.) Legacy AGCs

2.) Live AGC data
- API endpoints
- 

Data layer access control
   - Implemented protected routes

   Auth. access control 
      - using JWT
   User role acces control


Automated Land Parcelization

Overview

   The auto-parcelization service provides a fast, precise, and repeatable tool for farmers in AGCs to divide up their shared land expanse into smaller, contiguous plots, whose sizes match each farmer's pre-specified hectarage need. The tool immdeately reports back high-resolution coordinates of each farmer's plot boundaries, and eliminates the need to physically scout every single plot with expensive survey equipment.

   The API has simple, clean endpoints that easily interface with NIRSAL's AGC registration portal. 
   
   The payload for land auto-subdivision simply needs to be a GEOJSON FeatureCollection and an array of farmers and hectarage allocation per farmer.

Deliverables
Automatically sub-divide delineated land into smaller, adjacent plots, each sized according to farmers' pre-agreed hectarage allocations.
We worked to make the returned parcelzied AGC data payload lightweight, and easily shareable with relevant external parties.

For this new section of work, our team has been tasked to set up a completely automatic system to receive, evaluate, process and convert 3 formats (GPX, KML, KMZ) of computer generated and/or direct GPS field data. These file types need to be converted into easily transmittable GeoJSON, and bundled together with farmer info.

Features 

   API is accesible via 3 secured endpoints. 
      - POST Endpoints
         - 1st endpoint receives delineated AGC land data in optimized-for-web, geospatial data format (GeoJSON**), together with which farmer allocations and limited biometric data (photographs) have been bundled.
         - 2nd endpoint handles the 3 flavors of geospatial file data: GPX, KML, SHP
            - GPX data is typically discrete point data, acquired by a user walking a path with a GPS device. However, they are typically not closed shapes. These GPX tracks need to be coverted into closed, sub-dividable polygons. However, in cases where the user fails to return to their starting point, this conversion will not be possible. Our code will detect this condition, and report the error back to the AGC portal in order for the user to take action.
            - KML/KMZ files oftentimes come included with useless topology info. that needs to be striped away. Our programming will be robust enough to handle the extraction of only the pertinent data.
      - GET Endpoint
         - returns high-res., parcelized plot coordinates, and other auto-parcelization metadata, ready for consumption by interested parties.

   - We have been tasked with builidng a validation check that compares the AGC land size against the total farmer allocations. This check reports back to the portal to perimit the user continue with auto parcelization or require that they reupload their land survey size or modify their allocaitons

   - Each plot has high-resolution boundary coordinates that guarantees robust extensibility of the auto-parcelization platform, preparedness for next-level agri-tech applications & seamless integration with other high-tech platforms.
   To wit, the upper limit of precision for the sub-divided plot coordinates is somewhere between 0.3-0.5 hectares. This means for example that a agri-drone applying pesticides can fly the coordinates of a 0.3 ha. (3,000 SQM) plot without fear of overlap into another farmer's plot. This level of precision was a deliberate effort.



Technical Implementation
   - The methodology for accessing the parcelization service is documented here: 
      https://geoclusters.herokuapp.com/api-guide
   - Raw Base64 farmer photo data is converted from 

Features